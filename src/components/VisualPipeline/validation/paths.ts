export const PATH = {
  cm: {
    name: 'Name',
    type: 'Type',
    args: 'Arguments',
    execRole: 'Arguments.ExecutionRoleArn',
    primary: 'Arguments.PrimaryContainer',
    modelDataUrl: 'Arguments.PrimaryContainer.ModelDataUrl',
    modelDataUrlGet: 'Arguments.PrimaryContainer.ModelDataUrl.Get',
    dependsOn: (i: number) => `DependsOn[${i}]`,
  },
  dp: {
    name: 'Name',
    type: 'Type',
    args: 'Arguments',
    cluster: 'Arguments.ProcessingResources.ClusterConfig',
    instanceCount: 'Arguments.ProcessingResources.ClusterConfig.InstanceCount',
    volumeSize: 'Arguments.ProcessingResources.ClusterConfig.VolumeSizeInGB',
    instanceType: 'Arguments.ProcessingResources.ClusterConfig.InstanceType',
    appSpec: 'Arguments.AppSpecification',
    imageUri: 'Arguments.AppSpecification.ImageUri',
    inputs: 'Arguments.ProcessingInputs',
    inputAt: (i: number) => `Arguments.ProcessingInputs[${i}]`,
    inputNameAt: (i: number) => `Arguments.ProcessingInputs[${i}].InputName`,
    s3InputAt: (i: number) => `Arguments.ProcessingInputs[${i}].S3Input`,
    s3UriAt: (i: number) => `Arguments.ProcessingInputs[${i}].S3Input.S3Uri`,
    localPathAt: (i: number) => `Arguments.ProcessingInputs[${i}].S3Input.LocalPath`,
    s3DataTypeAt: (i: number) => `Arguments.ProcessingInputs[${i}].S3Input.S3DataType`,
    outputs: 'Arguments.ProcessingOutputConfig.Outputs',
    outputNameAt: (i: number) => `Arguments.ProcessingOutputConfig.Outputs[${i}].OutputName`,
    s3OutputAt: (i: number) => `Arguments.ProcessingOutputConfig.Outputs[${i}].S3Output`,
    s3OutUriAt: (i: number) => `Arguments.ProcessingOutputConfig.Outputs[${i}].S3Output.S3Uri`,
    s3OutLocalPathAt: (i: number) =>
      `Arguments.ProcessingOutputConfig.Outputs[${i}].S3Output.LocalPath`,
    s3UploadModeAt: (i: number) =>
      `Arguments.ProcessingOutputConfig.Outputs[${i}].S3Output.S3UploadMode`,
    stoppingMax: 'Arguments.StoppingCondition.MaxRuntimeInSeconds',
  },
  tm: {
    name: 'Name',
    type: 'Type',
    args: 'Arguments',
    algo: 'Arguments.AlgorithmSpecification',
    trainingImage: 'Arguments.AlgorithmSpecification.TrainingImage',
    trainingInputMode: 'Arguments.AlgorithmSpecification.TrainingInputMode',
    rc: 'Arguments.ResourceConfig',
    rcInstanceType: 'Arguments.ResourceConfig.InstanceType',
    rcInstanceCount: 'Arguments.ResourceConfig.InstanceCount',
    rcVolumeSize: 'Arguments.ResourceConfig.VolumeSizeInGB',
    idc: 'Arguments.InputDataConfig',
    idcChannelNameAt: (i: number) => `Arguments.InputDataConfig[${i}].ChannelName`,
    idcS3At: (i: number) => `Arguments.InputDataConfig[${i}].DataSource.S3DataSource`,
    idcS3TypeAt: (i: number) =>
      `Arguments.InputDataConfig[${i}].DataSource.S3DataSource.S3DataType`,
    idcS3UriAt: (i: number) => `Arguments.InputDataConfig[${i}].DataSource.S3DataSource.S3Uri`,
    outS3: 'Arguments.OutputDataConfig.S3OutputPath',
    stoppingMax: 'Arguments.StoppingCondition.MaxRuntimeInSeconds',
    dependsOn: (i: number) => `DependsOn[${i}]`,
  },
  dmbi: {
    name: 'Name',
    type: 'Type',
    args: 'Arguments',
    modelName: 'Arguments.ModelName',
    ModelNameGet: 'Arguments.ModelName.Get',
    transformInput: 'Arguments.TransformInput',
    transformInputDataSource: 'Arguments.TransformInput.DataSource',
    transformInputS3DataSource: 'Arguments.TransformInput.DataSource.S3DataSource',
    transformInputS3DataSourceS3Uri: 'Arguments.TransformInput.DataSource.S3DataSource.S3Uri',
    transformInputContentType: 'Arguments.TransformInput.ContentType',
    transformOutput: 'Arguments.TransformOutput',
    transformOutputS3OutputPath: 'Arguments.TransformOutput.S3OutputPath',
    transformResources: 'Arguments.TransformResources',
    transformResourcesInstanceType: 'Arguments.TransformResources.InstanceType',
    transformResourcesInstanceCount: 'Arguments.TransformResources.InstanceCount',
    dataCaptureConfig: 'Arguments.DataCaptureConfig',
    dataCaptureDestination: 'Arguments.DataCaptureConfig.DestinationS3Uri',
    dependsOn: (i: number) => `DependsOn[${i}]`,
  },
  dme: {
    name: 'Name',
    type: 'Type',
    args: 'Arguments',
    endpointName: 'Arguments.EndpointName',
    endpointConfig: 'Arguments.EndpointConfig',
    pv: 'Arguments.EndpointConfig.ProductionVariants',
    pvAt: (i: number) => `Arguments.EndpointConfig.ProductionVariants[${i}]`,
    pvInitial: (i: number) =>
      `Arguments.EndpointConfig.ProductionVariants[${i}].InitialInstanceCount`,
    pvMax: (i: number) =>
      `Arguments.EndpointConfig.ProductionVariants[${i}].ManagedInstanceScaling.MaxInstanceCount`,
    pvInstanceType: (i: number) => `Arguments.EndpointConfig.ProductionVariants[${i}].InstanceType`,
    pvModelNameGet: (i: number) =>
      `Arguments.EndpointConfig.ProductionVariants[${i}].ModelName.Get`,
    pvVariantName: (i: number) => `Arguments.EndpointConfig.ProductionVariants[${i}].VariantName`,
    dependsOn: (i: number) => `DependsOn[${i}]`,
  },
} as const;
